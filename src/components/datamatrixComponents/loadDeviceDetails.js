import {Alert} from 'react-native';
import {Buffer} from 'buffer';

export const loadDeviceDetails = async ({
  device,
  setServices,
  setCharacteristics,
  bleManager,
}) => {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    await device
      .connect()
      .then(device => device.discoverAllServicesAndCharacteristics())
      .then(device => {
        const data = Buffer.from('–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏').toString('base64');
        // –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ serviceUUID –∏ characteristicUUID –∏–∑–≤–µ—Å—Ç–Ω—ã
        // –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∏—Ö –∏–∑ writableCharacteristics
        return device.writeCharacteristicWithResponseForService(
          '000018f0-0000-1000-8000-00805f9b34fb', // –ü—Ä–∏–º–µ—Ä serviceUUID, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
          '00002af1-0000-1000-8000-00805f9b34fb', // –ü—Ä–∏–º–µ—Ä characteristicUUID, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
          data,
        );
      })
      .then(() => console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã'))
      .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error));

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    const servicesList = await device.services();
    setServices(servicesList);
    const charsData = {};
    const writableCharacteristics = [];

    // –ü–µ—Ä–µ–±–æ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    for (const service of servicesList) {
      const chars = await service.characteristics();
      charsData[service.uuid] = chars;

      console.log(`–°–µ—Ä–≤–∏—Å: ${service.uuid}`);
      for (const characteristic of chars) {
        console.log(`  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${characteristic.uuid}`);
        console.log(
          `    ‚§∑ isWritableWithResponse: ${characteristic.isWritableWithResponse}`,
        );
        console.log(
          `    ‚§∑ isWritableWithoutResponse: ${characteristic.isWritableWithoutResponse}`,
        );

        if (
          characteristic.isWritableWithResponse ||
          characteristic.isWritableWithoutResponse
        ) {
          writableCharacteristics.push({
            serviceUUID: service.uuid,
            characteristicUUID: characteristic.uuid,
            mode: characteristic.isWritableWithResponse
              ? 'withResponse'
              : 'withoutResponse',
          });
        }
      }
    }

    setCharacteristics(charsData);

    if (writableCharacteristics.length === 0) {
      customAlert('–í–Ω–∏–º–∞–Ω–∏–µ', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫');
    } else {
      console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:');
      writableCharacteristics.forEach(item => {
        console.log(
          `  –°–µ—Ä–≤–∏—Å: ${item.serviceUUID}, –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${item.characteristicUUID}, –†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏: ${item.mode}`,
        );
      });
    }

    return writableCharacteristics;
  } catch (error) {
    customAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:', error);
  }
};
